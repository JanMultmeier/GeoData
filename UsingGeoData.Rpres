
Nutzung von Geo-Daten mit R 
======================================================== 
author: Jan Multmeier 
date: KBV 
`r format(Sys.Date(),"%d.%m.%Y")`
 

Uebersicht 
======================================================== 
transition: rotate

Google APIs liefern z.B. Routen- oder Lokalisationsinformationen. Das package [ggmaps](http://cran.r-project.org/web/packages/ggmap/ggmap.pdf) bietet eine Integration von R und Google APIs, aber nicht immer die passende Metrik. 
Daher schreiben wir diese Funktionen: 


- **getDist**: Distanzen bzw. Fahrzeiten zwischen zwei Orten 
- **getGeo**: Geocoding einer Adresse in Laengen- und Breitenangaben 

Google APIs
=======================================================

API: *application programming interface*
>... ein Programmteil, der von einem Softwaresystem anderen Programmen zur Anbindung an das System zur Verfuegung gestellt wird. (Quelle: [Wikipedia](http://de.wikipedia.org/wiki/Programmierschnittstelle))  

Beispiel:
http://maps.googleapis.com/maps/api/distancematrix/output?parameters
- *output*: `json`, `xml`
- *parameters*: `origins`, `destinations`, `sensor`, `mode`, `units`


getDist: Funktion
======================================================= 

Gebraucht Googles [Distanz-Matrix API](https://developers.google.com/maps/documentation/distancematrix/)

Input:
- 

getDist: Datenabfrage
======================================================= 


```
getDist <- function(from,to,modus="driving",get="distance") {
  library(rjson)
  metric <- numeric(length=length(from))
  for (i in seq_along(from)) {
    url <- paste0("http://maps.googleapis.com/maps/api/distancematrix  /json?origins=Deutschland+",gsub(" ","+",from[i]),"&destinations=Deutschland+",gsub(" ","+",to[i]),"&mode=",modus,"&units=metric&language=de-DE&sensor=false")
    data <- fromJSON(file=url)
```

getDist: Datencheck
======================================================== 

```
    if (data$status=="INVALID_REQUEST") {
      warning("Ungueltige Anfrage")
    }
    if (data$status=="UNKNOWN_ERROR") {
      warning("Unbekannter Fehler - erneut probieren")
    }
    if (data$status=="MAX_ELEMENTS_EXCEEDED") {
      stop("Anzahl der zulaessigen Objekte je Abfrage ueberschritten")
    }
    if (data$status=="OVER_QUERY_LIMIT") {
      stop("Anfragelimit erreicht")
    }
    if (data$status=="REQUEST_DENIED") {
      stop("Anfrage abgelehnt")
    }
```

getDist: Wertextraktion
========================================================
```
if (data$status=="OK") {
    
      if (data$rows[[1]]$elements[[1]]$status=="OK") {
        if (get=="distance") {
          metric[i] <- data$rows[[1]]$elements[[1]]$distance$value
          metric[i] <- round(metric[i]/1000,digits=1)
        }
        
       if(get=="duration") {
         metric[i] <- data$rows[[1]]$elements[[1]]$duration$value
         metric[i] <- round(metric[i]/(60^2),digits=2)
        }
      }
    }
```

getDist: 'NA'-Werte
========================================================

```
else {
     metric[i] <- NA
     if (data$rows[[1]]$elements[[1]]$status=="NOT_FOUND") {
       warning("Start- oder Zielort nicht gefunden")
     }
     if (data$rows[[1]]$elements[[1]]$status=="ZERO_RESULTS") {
       warning("Keine Route zwischen Start- und Zielort gefunden")
     }
    }
```


